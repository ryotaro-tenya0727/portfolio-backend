version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
executors:
  backend_container:
    docker:
      - image: cimg/ruby:2.7.4
        environment:
          CC_TEST_REPORTER_ID: 5df56710761ce8545b8cf471f6fc0be0870c8eab3bbbb7d4776e072fd638b037
          BUNDLER_VERSION: 2.1.4
          RAILS_ENV: 'test'
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_PASSWORD: password
          DB_USER: root
      - image: cimg/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: password
    working_directory: ~/backend

commands:
  install_bundler:
    description: Bundler install
    steps:
      - run: gem install bundler -v 2.1.4
  build_and_push_command: aws-ecr/build-and-push-image

jobs:
  fetch_source_code:
    executor:
      name: backend_container
    steps:
      - checkout
      - save_cache:
          key: v1-backend-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/backend
  bundle_dependencies:
    executor:
      name: backend_container
    steps:
      - restore_cache:
          key: v1-backend-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-
      - install_bundler
      - run:
          name: Bundle Install dependencies
          command: |
            bundle config set --local path 'vendor/bundle'
      - save_cache:
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  rspec:
    executor:
      name: backend_container
    parallelism: 2
    steps:
      - restore_cache:
          key: v1-backend-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Waiting stand up database
          command: |
            dockerize -wait \
            tcp://127.0.0.1:3306 -timeout 120s
      - install_bundler
      - run:
          command: |
            bundle install --path vendor/bundle
      - run:
          name: create database
          command: bundle exec rails db:create
      - run:
          name: migrate database
          command: bundle exec rails db:migrate
      - run:
          name: Parallel RSpec
          command: |
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=filename)
            bundle exec rspec --format progress --format RspecJunitFormatter -o tmp/test-results/rspec.xml -- $TESTFILES
      # テストカバレッジレポートを作成
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      # 別のjobでも使用できるファイルを指定。rootにはworking_directory:からの相対パス、pathには共有するファイル。
      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json
      - store_test_results:
          path: tmp/test-results
      - store_artifacts:
          path: test-artifacts

  upload-coverage:
    executor:
      name: backend_container
    steps:
      # persist_to_workspaceをアタッチ
      - attach_workspace:
          at: ~/backend
      - restore_cache:
          key: v1-backend-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          command: |
            ./cc-test-reporter sum-coverage --output - codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -
  rubocop:
    executor:
      name: backend_container
    steps:
      - restore_cache:
          key: v1-backend-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-
      - install_bundler
      - run:
          command: |
            bundle install --path vendor/bundle
      - run:
          name: Execute rubocop
          command: |
            bundle exec rubocop
  build_push:
    steps:
      - build_and_push_command:
          region: '${AWS_REGION}'
          repo: rails-idol-otaku-project
          dockerfile: Dockerfile.prod
          path: .
          tag: '${CIRCLE_SHA1}'

workflows:
  version: 2
  test_build_push_deploy:
    jobs:
      - fetch_source_code
      - bundle_dependencies:
          requires:
            - fetch_source_code
      - rspec:
          requires:
            - bundle_dependencies
      - rubocop:
          requires:
            - rspec
      - upload-coverage:
          requires:
            - rubocop
      - build_push:
          requires:
            - upload-coverage
          filters:
            branches:
              only:
                - master
